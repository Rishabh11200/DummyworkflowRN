name: Install dependencies and run project

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # Install dependencies using yarn
  install-dependencies:
    runs-on: [ self-hosted, macOS, X64 ]
    strategy:
      matrix:
        build-type: [ Release ]

    steps:
    - name: Show self-hosted machine infomation
      run: uname -a

    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.9.1

    - name: Checkout repo from dev branch
      uses: actions/checkout@v4
      with:
        ref: main

    - name: Install npm dependency
      run: yarn install

    # Jobs for Android Building:

    # Step 1: Cache Gradle Wrapper
    - name: Cache Gradle Wrapper
      uses: actions/cache@v4.0.2
      with:
        path: ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-wrapper-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}

    # Step 2: Cache Gradle Dependencies
    - name: Cache Gradle Dependencies
      uses: actions/cache@v4.0.2
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-caches-${{ hashFiles('gradle/wrapper/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-caches-

    # Step 3: Make Gradlew Executable
    - name: Make Gradlew Executable
      run: chmod +x android/gradlew

    # Step 4: Generate ${{ matrix.build-type }} APK
    - name: Generate ${{ matrix.build-type }} APK
      run: |
        cd android
        ./gradlew assemble${{ matrix.build-type }}

    # Step 5: Generate ${{ matrix.build-type }} Bundle
    - name: Generate ${{ matrix.build-type }} Bundle
      run: |
        cd android
        ./gradlew bundle${{ matrix.build-type }}

    # Step 6: Upload ${{ matrix.build-type }} APK and Bundle as artifacts
    - name: Upload ${{ matrix.build-type }} APK and Bundle as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: android-${{ matrix.build-type }}-files
        path: |
          MoveMatic/android/app/build/outputs/apk/${{ matrix.build-type }}/app-${{ matrix.build-type }}.apk
          MoveMatic/android/app/build/outputs/bundle/${{ matrix.build-type }}/app-${{ matrix.build-type }}.aab

    # Jobs for iOS Building:

    # Step 1: Cache CocoaPods
    - name: Cache CocoaPods
      uses: actions/cache@v3
      with:
        path: ios/Pods
        key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
        restore-keys: |
          ${{ runner.os }}-pods-

    # Step 2: Install pod dependency
    - name: Install pod dependency
      run: |
        cd ios
        # Remove podfile.lock to avoid conflicts
        rm Podfile.lock
        # Install pod dependencies
        pod install

    # Step 3: Generate ${{ matrix.build-type }} IPA
    - name: Generate ${{ matrix.build-type }} IPA
      run: |
        cd ios
        # Build iOS app with xcodebuild
        xcodebuild -workspace MoveMatic.xcworkspace -scheme MoveMatic -configuration ${{ matrix.build-type }} clean build \
        # Disable code signing
        CODE_SIGN_IDENTITY="" \
        CODE_SIGNING_REQUIRED=NO
        # Copy the app to the same location as the simulator build
        cp -r build/Build/Products/${{ matrix.build-type }}-iphoneos/MoveMatic.app build/Build/Products/${{ matrix.build-type }}-iphonesimulator/MoveMatic.app

    # Step 4: Upload ${{ matrix.build-type }} IPA as artifacts
    - name: Upload ${{ matrix.build-type }} IPA as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ios-${{ matrix.build-type }}-files
        path: |
          ios/build/Build/Products/${{ matrix.build-type }}-iphoneos/MoveMatic.app
          ios/build/Build/Products/${{ matrix.build-type }}-iphonesimulator/MoveMatic.app